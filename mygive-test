#!/bin/dash

if [ $# -ne 2 ];then
    echo "usage: mygive-test <assignment> <filename>" >&2
    exit 1
fi

asm=$1
file=$2

if ! echo "$asm" | grep -q "^[a-z][a-zA-Z0-9_]*$";then
    echo "mygive-test: invalid assignment: $asm" >&2
    exit 1
fi

if ! echo "$file" | grep -Eq "^[a-zA-Z0-9_\-\.\/]";then
    echo "mygive-test: invalid filename: $file" >&2
    exit 1
fi

[ -d ".mygive/assignments/$asm" ] || { 
    echo "mygive-test: assignment $asm not found" >&2; exit 1 
    }

des_path=".mygive/assignments/$asm/tests"
pass=0
fail=0
for d in $des_path;do
    file_name=$(find $d -mindepth 1 -maxdepth 1 -type d | cut -d'/' -f5 | sort)
    # suppose every filename with marking has mark file and filename without marking don't has mark file
    for f in $file_name;do
        file_content=$(find $des_path/$f -mindepth 1 -maxdepth 1 -type f | cut -d'/' -f6) 
        if echo $file_content | grep -q 'marks';then
            continue
        else
            options=$(cat $des_path/$f/options 2>/dev/null) 
            stdout=$(cat $des_path/$f/stdout 2>/dev/null) 
            arguments=$(cat $des_path/$f/arguments 2>/dev/null) 
            stdin=$(cat $des_path/$f/stdin 2>/dev/null)  
            exit_status=$(cat $des_path/$f/exit_status 2>/dev/null) 
            stderr=$(cat $des_path/$f/stderr 2>/dev/null) 
            stderr_1=$(mktemp)
            cat $des_path/$f/stderr > "$stderr_1" 2>/dev/null
            file_stdout=$(mktemp)
            file_stderr=$(mktemp)
            desired_output=$(mktemp)
            # my standard output file
            stdout_tempfile=$(mktemp)
            output_std=$(echo "$stdin" | "./$file" $arguments 2>/dev/null)
            echo "$stdin" | "./$file" $arguments >"$stdout_tempfile" 2>"$file_stderr"
            exit_status_real=$?

            stdout_option=$(cat $stdout_tempfile)
            stdout_standard_tempfile=$(mktemp)
            cat $des_path/$f/stdout >"$stdout_standard_tempfile" 2>/dev/null
            stdout_standard="$stdout"
            if echo $options | grep -q 'c';then
                stdout_option=$(echo "$stdout_option" | tr '[:upper:]' '[:lower:]')
                stdout_standard=$(echo "$stdout_standard" | tr '[:upper:]' '[:lower:]')
            fi
            if echo $options | grep -q 'w';then
                stdout_option=$(echo "$stdout_option"  |tr -s '[:space:]' ' ')
                stdout_standard=$(echo "$stdout_standard" | tr -s '[:space:]' ' ')
            fi
            if echo $options | grep -q 'b';then
                stdout_option=$(echo "$stdout_option" | grep -v '^$'| tr '\n' ' ')
                stdout_standard=$(echo "$stdout_standard" | grep -v '^$'| tr '\n' ' ')
            fi
            if echo $options | grep -q 'd';then
                stdout_option=$(echo "$stdout_option" | tr -cd '[:alpha:][:space:]\n')
                stdout_standard=$(echo "$stdout_standard" | tr -cd '[:alpha:][:space:]\n')
            fi
            echo "$stdout_option" >"$file_stdout" 
            echo "$stdout_standard" >"$desired_output"
            
            
            x=$(wc -c < "$stdout_tempfile")
            y=$(wc -c < "$stdout_standard_tempfile")
            a=$(($x - $y))
            b=$(($y - $x))
            if ! cmp -s "$file_stdout" "$desired_output"; then
                output_size=$(wc -c < "$stdout_tempfile")
                if [ ! -z "$stdout" ] && [ $output_size -gt 0 ];then
                    if [ $a -eq 1 ] ; then
                        echo "* Test $f failed."
                        fail=$((fail + 1))
                        echo "Extra newline at end of stdout"
                    elif [ $b -eq 1 ];then
                        echo "* Test $f failed."
                        fail=$((fail + 1))
                        echo "Missing newline at end of stdout"
                    elif echo $options | grep -q 'd'; then
                        echo "* Test $f passed."
                        pass=$((pass + 1))
                    elif echo $options | grep -q 'w';then
                        echo "* Test $f passed."
                        pass=$((pass + 1))
                    elif [ $a -eq 0 ];then
                        content_std=$(echo "$stdin" | "./$file" $arguments 2>/dev/null)
                        if [ "$stdout" != "$content_std" ];then
                            echo "* Test $f failed."
                            fail=$((fail + 1))
                            printf -- "--- Incorrect stdout of $(wc -c < "$stdout_tempfile") bytes:\n"
                            cat "$stdout_tempfile"
                            echo ""

                            printf -- "--- Correct stdout is these $(wc -c < "$stdout_standard_tempfile") bytes:\n"
                            cat "$stdout_standard_tempfile"
                            echo ""
                        else
                            echo "* Test $f passed."
                            pass=$((pass + 1))
                        fi
                    else
                        echo "* Test $f failed."
                        fail=$((fail + 1))
                        printf -- "--- Incorrect stdout of $(wc -c < "$stdout_tempfile") bytes:\n"
                        cat "$stdout_tempfile"
                        echo ""

                        printf -- "--- Correct stdout is these $(wc -c < "$stdout_standard_tempfile") bytes:\n"
                        cat "$stdout_standard_tempfile"
                        echo ""
                    fi
                elif [ $output_size -eq 0 ];then
                    standard_output_size=$(wc -c < "$stdout_standard_tempfile")
                    if [ $standard_output_size -gt 0 ];then
                        echo "* Test $f failed."
                        fail=$((fail + 1))
                        echo "--- No stdout produced, these $(wc -c < "$stdout_standard_tempfile") bytes expected:"
                        cat "$stdout_standard_tempfile"
                        echo ""
                    else
                        echo "* Test $f passed."
                        pass=$((pass + 1))
                    fi
                else
                    echo "* Test $f failed."
                    fail=$((fail + 1))
                    echo "--- No stdout expected, these $(wc -c < "$stdout_tempfile") bytes produced:"
                    cat "$stdout_tempfile"
                    echo ""
                fi
            else
                if [ "$a" -eq 1 ] ;then 
                    echo "* Test $f failed."
                    fail=$((fail + 1))
                    echo "Extra newline at end of stdout"
                elif [ "$b" -eq 1 ]; then
                    #VVVVV
                    echo "* Test $f failed."
                    fail=$((fail + 1))
                    echo "Missing newline at end of stdout"
                elif [ "$a" -ne 0 ];then
                    echo "* Test $f failed."
                    fail=$((fail + 1))
                    printf -- "--- Incorrect stdout of $(wc -c < "$stdout_tempfile") bytes:\n"
                    cat "$stdout_tempfile"
                    echo ""
                    printf -- "--- Correct stdout is these $(wc -c < "$stdout_standard_tempfile") bytes:\n"
                    cat "$stdout_standard_tempfile"
                    echo ""
                else
                    if [ ! -z "$stderr" ];then
                        if ! cmp -s "$file_stderr" "$stderr_1"; then
                            :
                        else
                            echo "* Test $f passed."
                            pass=$((pass + 1))
                        fi
                    else
                        echo "* Test $f passed."
                        pass=$((pass + 1))
                    fi
                fi
            fi
            file1_digits=$(mktemp)
            file2_digits=$(mktemp)
            tr -cd '0-9' < "$file_stderr" > "$file1_digits"
            tr -cd '0-9' < "$stderr_1" > "$file2_digits"
            if ! cmp -s "$file_stderr" "$stderr_1"; then
                if [ ! -z "$stderr" ];then
                    q=$(wc -c < "$file_stderr")
                    w=$(wc -c < "$stderr_1")
                    e=$(($q - $w))
                    r=$(($w - $q))
                    content_std=$(echo "$stdin" | "./$file" $arguments 2>/dev/null)
                    if [ "$e" -eq 1 ];then
                        echo "Extra newline at end of stderr"
                    elif [ "$r" -eq 1 ];then
                        echo "Missing newline at end of stderr"
                    elif [ "$stdout" = "$content_std" ];then
                        echo "* Test $f failed."
                        fail=$((fail + 1))
                        printf -- "--- Incorrect stderr of $(wc -c < "$file_stderr") bytes:\n"
                        cat "$file_stderr"
                        echo ""
                        printf -- "--- Correct stderr is these $(wc -c < "$stderr_1") bytes:\n"
                        cat "$stderr_1"
                        echo ""
                    else
                        
                        printf -- "--- Incorrect stderr of $(wc -c < "$file_stderr") bytes:\n"
                        cat "$file_stderr"
                        echo ""
                        printf -- "--- Correct stderr is these $(wc -c < "$stderr_1") bytes:\n"
                        cat "$stderr_1"
                        echo ""
                    fi
                fi
            fi
            
            if [ ! -z "$exit_status" ];then
                echo "$exit_status" > status_1.txt
                echo "$exit_status_real" > status_2.txt
                if ! cmp -s status_1.txt status_2.txt; then
                    echo "Exit status of $exit_status_real incorrect should be $exit_status"
                fi
            fi

        fi
    done
done
echo "** $pass tests passed, $fail tests failed"
rm -f "$file_stdout" "$file_stderr" "$stdout_tempfile" "$desired_output" "$stderr_1" "$stdout_standard_tempfile"


